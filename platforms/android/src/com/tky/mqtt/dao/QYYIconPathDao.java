package com.tky.mqtt.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tky.mqtt.dao.QYYIconPath;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table QYYICON_PATH.
*/
public class QYYIconPathDao extends AbstractDao<QYYIconPath, String> {

    public static final String TABLENAME = "QYYICON_PATH";

    /**
     * Properties of entity QYYIconPath.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AppId = new Property(0, String.class, "appId", true, "APP_ID");
        public final static Property Path = new Property(1, String.class, "path", false, "PATH");
    };


    public QYYIconPathDao(DaoConfig config) {
        super(config);
    }
    
    public QYYIconPathDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'QYYICON_PATH' (" + //
                "'APP_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: appId
                "'PATH' TEXT);"); // 1: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QYYICON_PATH'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, QYYIconPath entity) {
        stmt.clearBindings();
 
        String appId = entity.getAppId();
        if (appId != null) {
            stmt.bindString(1, appId);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public QYYIconPath readEntity(Cursor cursor, int offset) {
        QYYIconPath entity = new QYYIconPath( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // appId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // path
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, QYYIconPath entity, int offset) {
        entity.setAppId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(QYYIconPath entity, long rowId) {
        return entity.getAppId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(QYYIconPath entity) {
        if(entity != null) {
            return entity.getAppId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
