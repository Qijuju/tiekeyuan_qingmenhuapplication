package com.tky.mqtt.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tky.mqtt.dao.ModuleCount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MODULE_COUNT.
*/
public class ModuleCountDao extends AbstractDao<ModuleCount, String> {

    public static final String TABLENAME = "MODULE_COUNT";

    /**
     * Properties of entity ModuleCount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Count1 = new Property(2, Long.class, "count1", false, "COUNT1");
        public final static Property Count2 = new Property(3, Long.class, "count2", false, "COUNT2");
        public final static Property Count3 = new Property(4, Long.class, "count3", false, "COUNT3");
        public final static Property Count4 = new Property(5, Long.class, "count4", false, "COUNT4");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
    };


    public ModuleCountDao(DaoConfig config) {
        super(config);
    }
    
    public ModuleCountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MODULE_COUNT' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'COUNT1' INTEGER," + // 2: count1
                "'COUNT2' INTEGER," + // 3: count2
                "'COUNT3' INTEGER," + // 4: count3
                "'COUNT4' INTEGER," + // 5: count4
                "'TYPE' TEXT);"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MODULE_COUNT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ModuleCount entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Long count1 = entity.getCount1();
        if (count1 != null) {
            stmt.bindLong(3, count1);
        }
 
        Long count2 = entity.getCount2();
        if (count2 != null) {
            stmt.bindLong(4, count2);
        }
 
        Long count3 = entity.getCount3();
        if (count3 != null) {
            stmt.bindLong(5, count3);
        }
 
        Long count4 = entity.getCount4();
        if (count4 != null) {
            stmt.bindLong(6, count4);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ModuleCount readEntity(Cursor cursor, int offset) {
        ModuleCount entity = new ModuleCount( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // count1
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // count2
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // count3
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // count4
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ModuleCount entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCount1(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCount2(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCount3(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCount4(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ModuleCount entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ModuleCount entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
