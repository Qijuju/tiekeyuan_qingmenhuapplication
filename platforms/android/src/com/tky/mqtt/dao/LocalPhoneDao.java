package com.tky.mqtt.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tky.mqtt.dao.LocalPhone;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOCAL_PHONE.
*/
public class LocalPhoneDao extends AbstractDao<LocalPhone, String> {

    public static final String TABLENAME = "LOCAL_PHONE";

    /**
     * Properties of entity LocalPhone.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Isplatform = new Property(1, Boolean.class, "isplatform", false, "ISPLATFORM");
        public final static Property Platformid = new Property(2, String.class, "platformid", false, "PLATFORMID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Phonenumber = new Property(4, String.class, "phonenumber", false, "PHONENUMBER");
        public final static Property Pinyinname = new Property(5, String.class, "pinyinname", false, "PINYINNAME");
    };


    public LocalPhoneDao(DaoConfig config) {
        super(config);
    }
    
    public LocalPhoneDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCAL_PHONE' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'ISPLATFORM' INTEGER," + // 1: isplatform
                "'PLATFORMID' TEXT," + // 2: platformid
                "'NAME' TEXT," + // 3: name
                "'PHONENUMBER' TEXT," + // 4: phonenumber
                "'PINYINNAME' TEXT);"); // 5: pinyinname
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCAL_PHONE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LocalPhone entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Boolean isplatform = entity.getIsplatform();
        if (isplatform != null) {
            stmt.bindLong(2, isplatform ? 1l: 0l);
        }
 
        String platformid = entity.getPlatformid();
        if (platformid != null) {
            stmt.bindString(3, platformid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String phonenumber = entity.getPhonenumber();
        if (phonenumber != null) {
            stmt.bindString(5, phonenumber);
        }
 
        String pinyinname = entity.getPinyinname();
        if (pinyinname != null) {
            stmt.bindString(6, pinyinname);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LocalPhone readEntity(Cursor cursor, int offset) {
        LocalPhone entity = new LocalPhone( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // isplatform
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // platformid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phonenumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // pinyinname
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LocalPhone entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsplatform(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setPlatformid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhonenumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPinyinname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(LocalPhone entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(LocalPhone entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
