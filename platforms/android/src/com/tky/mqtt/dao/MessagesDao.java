package com.tky.mqtt.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tky.mqtt.dao.Messages;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGES.
*/
public class MessagesDao extends AbstractDao<Messages, String> {

    public static final String TABLENAME = "MESSAGES";

    /**
     * Properties of entity Messages.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Sessionid = new Property(2, String.class, "sessionid", false, "SESSIONID");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property From = new Property(4, String.class, "from", false, "FROM");
        public final static Property Message = new Property(5, String.class, "message", false, "MESSAGE");
        public final static Property Messagetype = new Property(6, String.class, "messagetype", false, "MESSAGETYPE");
        public final static Property Platform = new Property(7, String.class, "platform", false, "PLATFORM");
        public final static Property IsSingle = new Property(8, String.class, "isSingle", false, "IS_SINGLE");
        public final static Property IsFailure = new Property(9, String.class, "isFailure", false, "IS_FAILURE");
        public final static Property When = new Property(10, Long.class, "when", false, "WHEN");
        public final static Property IsDelete = new Property(11, String.class, "isDelete", false, "IS_DELETE");
        public final static Property ImgSrc = new Property(12, String.class, "imgSrc", false, "IMG_SRC");
        public final static Property Singlecount = new Property(13, String.class, "singlecount", false, "SINGLECOUNT");
        public final static Property Qunliaocount = new Property(14, String.class, "qunliaocount", false, "QUNLIAOCOUNT");
    };


    public MessagesDao(DaoConfig config) {
        super(config);
    }
    
    public MessagesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGES' (" + //
                "'_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: _id
                "'ACCOUNT' TEXT," + // 1: account
                "'SESSIONID' TEXT," + // 2: sessionid
                "'TYPE' TEXT," + // 3: type
                "'FROM' TEXT," + // 4: from
                "'MESSAGE' TEXT," + // 5: message
                "'MESSAGETYPE' TEXT," + // 6: messagetype
                "'PLATFORM' TEXT," + // 7: platform
                "'IS_SINGLE' TEXT," + // 8: isSingle
                "'IS_FAILURE' TEXT," + // 9: isFailure
                "'WHEN' INTEGER," + // 10: when
                "'IS_DELETE' TEXT," + // 11: isDelete
                "'IMG_SRC' TEXT," + // 12: imgSrc
                "'SINGLECOUNT' TEXT," + // 13: singlecount
                "'QUNLIAOCOUNT' TEXT);"); // 14: qunliaocount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Messages entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String sessionid = entity.getSessionid();
        if (sessionid != null) {
            stmt.bindString(3, sessionid);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(5, from);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(6, message);
        }
 
        String messagetype = entity.getMessagetype();
        if (messagetype != null) {
            stmt.bindString(7, messagetype);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(8, platform);
        }
 
        String isSingle = entity.getIsSingle();
        if (isSingle != null) {
            stmt.bindString(9, isSingle);
        }
 
        String isFailure = entity.getIsFailure();
        if (isFailure != null) {
            stmt.bindString(10, isFailure);
        }
 
        Long when = entity.getWhen();
        if (when != null) {
            stmt.bindLong(11, when);
        }
 
        String isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindString(12, isDelete);
        }
 
        String imgSrc = entity.getImgSrc();
        if (imgSrc != null) {
            stmt.bindString(13, imgSrc);
        }
 
        String singlecount = entity.getSinglecount();
        if (singlecount != null) {
            stmt.bindString(14, singlecount);
        }
 
        String qunliaocount = entity.getQunliaocount();
        if (qunliaocount != null) {
            stmt.bindString(15, qunliaocount);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Messages readEntity(Cursor cursor, int offset) {
        Messages entity = new Messages( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sessionid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // from
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // message
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // messagetype
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // platform
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isSingle
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // isFailure
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // when
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // isDelete
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // imgSrc
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // singlecount
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // qunliaocount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Messages entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSessionid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFrom(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMessagetype(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPlatform(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsSingle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsFailure(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWhen(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setIsDelete(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setImgSrc(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSinglecount(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setQunliaocount(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Messages entity, long rowId) {
        return entity.get_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Messages entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
